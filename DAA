[10/27/2025 10:29 PM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: #include <iostream>
#include <vector>
using namespace std;

bool isSafe(int v, const vector<vector<int>>& graph, const vector<int>& colors, int c) {
    for (int i = 0; i < graph.size(); i++) {
     
        if (graph[v][i] == 1 && colors[i] == c) {
            return false;
        }
    }
    return true;
}
bool graphColoringUtil(const vector<vector<int>>& graph, int m, vector<int>& colors, int v) {
 
    if (v == graph.size()) {
        return true;
    }

    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, colors, c)) {
            colors[v] = c; 
            
            if (graphColoringUtil(graph, m, colors, v + 1)) {
                return true;
            }
            
            colors[v] = 0;
        }
    }
    
    return false;
}

bool graphColoring(const vector<vector<int>>& graph, int m, vector<int>& colors) {
 
    colors.assign(graph.size(), 0);
    
    return graphColoringUtil(graph, m, colors, 0);
}

int main() {
    int V;
    cin >> V;
    
    vector<vector<int>> graph(V, vector<int>(V));
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }
    
    int C;
    cin >> C;
    
    vector<int> colors(V);
    
    if (graphColoring(graph, C, colors)) {
        cout << "Solution exists" << endl;
        cout << "Colors: [";
        for (int i = 0; i < V; i++) {
            cout << colors[i];
            if (i < V - 1) {
                cout << ", ";
            }
        }
        cout << "]" << endl;
    } else {
        cout << "No solution" << endl;
    }
    
    return 0;
}
[10/27/2025 10:30 PM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: graph colouring
[10/27/2025 10:30 PM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: #include <bits/stdc++.h>
using namespace std;

// Check if it's safe to place a queen at board[row][col]
bool isSafe(vector<string> &board, int row, int col, int n) {
    // Check column
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 'Q')
            return false;
    }

    // Check upper-left diagonal
    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 'Q')
            return false;
    }

    // Check upper-right diagonal
    for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
        if (board[i][j] == 'Q')
            return false;
    }

    return true;
}

// Recursive function to solve N-Queens
void solve(int row, int n, vector<string> &board, vector<vector<string>> &ans) {
    if (row == n) {
        ans.push_back(board);
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 'Q';          // Place queen
            solve(row + 1, n, board, ans);  // Recurse for next row
            board[row][col] = '.';          // Backtrack
        }
    }
}

// Function that sets up board and returns all solutions
vector<vector<string>> solveNQueens(int n) {
    vector<vector<string>> ans;
    vector<string> board(n, string(n, '.')); // Initialize empty board
    solve(0, n, board, ans);
    return ans;
}

int main() {
    int n;
    cout << "Enter the number of queens: ";
    cin >> n;

    vector<vector<string>> solutions = solveNQueens(n);

    cout << "\nTotal solutions: " << solutions.size() << "\n\n";
    for (int i = 0; i < solutions.size(); i++) {
        cout << "Solution " << i + 1 << ":\n";
        for (auto row : solutions[i])
            cout << row << "\n";
        cout << "\n";
    }

    return 0;
}
[10/27/2025 10:30 PM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: n queen
[10/27/2025 10:31 PM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: #include <iostream>

#include <string>

#include <algorithm>

using namespace std;



string paths[100]; // to store all paths

int pathCount = 0;



int n;

int maze[10][10];

bool visited[10][10];



bool isSafe(int r, int c) {

    return (r >= 0 && c >= 0 && r < n && c < n && maze[r][c] == 1 && !visited[r][c]);

}



void solve(int r, int c, string path) {

    if (r == n - 1 && c == n - 1) { // reached destination

        paths[pathCount++] = path;

        return;

    }



    visited[r][c] = true;



    // Move Down

    if (isSafe(r + 1, c)) solve(r + 1, c, path + "D");

    // Move Left

    if (isSafe(r, c - 1)) solve(r, c - 1, path + "L");

    // Move Right

    if (isSafe(r, c + 1)) solve(r, c + 1, path + "R");

    // Move Up

    if (isSafe(r - 1, c)) solve(r - 1, c, path + "U");



    visited[r][c] = false; // backtrack

}



int main() {

    cin >> n;

    for (int I = 0; I < n; I++)

        for (int j = 0; j < n; j++)

            cin >> maze[I][j];



    if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0) {

        cout << -1;

        return 0;

    }



    solve(0, 0, "");



    if (pathCount == 0) {

        cout << -1;

    } else {

        sort(paths, paths + pathCount);

        for (int I = 0; I < pathCount; I++) {

            cout << paths[I];

            if (I != pathCount - 1) cout << " ";

        }

    }

    return 0;

}
[10/27/2025 10:31 PM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: rat at maze
[10/28/2025 9:10 AM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: #include <iostream>
using namespace std;

void heapify(int a[], int n, int i) {
    int s=i,l=2*i+1,r=2*i+2;
    if(l<n && a[l]<a[s]) s=l;
    if(r<n && a[r]<a[s]) s=r;
    if(s!=i){ swap(a[i],a[s]); heapify(a,n,s); }
}

int main() {
    int a[50],n,x; 
    cin>>n;
    for(int i=0;i<n;i++) cin>>a[i];
    for(int i=n/2-1;i>=0;i--) heapify(a,n,i);

    int t=2*a[0], j=0;
    for(int i=0;i<n;i++) if(a[i]>=t) a[j++]=a[i];
    n=j;
    for(int i=n/2-1;i>=0;i--) heapify(a,n,i);

    if(n==0) cout<<"Empty Heap";
    else for(int i=0;i<n;i++) cout<<a[i]<<" ";
}
[10/28/2025 9:35 AM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: #include <bits/stdc++.h>
using namespace std;



void heapify(int a[],int n,int i){
    int l=2*i+1,r=2*i+2,b=i;
    if(l<n && a[l]>a[b]) b=l;
    if(r<n && a[r]>a[b]) b=r;
    if(b!=i){swap(a[i],a[b]);heapify(a,n,b);}
}

int kthLargest(int a[],int n,int k){
    for(int i=n/2-1;i>=0;i--) heapify(a,n,i);
    for(int i=0;i<k-1;i++){
        swap(a[0],a[n-1-i]);
        heapify(a,n-i-1,0);
    }
    return a[0];
}

int main(){
    int n,k,a[100];
    cin>>n;
    for(int i=0;i<n;i++) cin>>a[i];
    cin>>k;
    cout<<kthLargest(a,n,k);
}
[10/28/2025 9:35 AM] ʀ ɢ ᴘʀᴀꜱᴀɴɴᴀ: k sort


// You are using GCC
#include <bits/stdc++.h>
using namespace std;

// Function to compute LPS (Longest Prefix Suffix) array for KMP
vector<int> computeLPS(string str) {
    int n = str.size();
    vector<int> lps(n, 0);
    int len = 0; // length of the previous longest prefix suffix
    for (int i = 1; i < n; i++) {
        while (len > 0 && str[i] != str[len])
            len = lps[len - 1];
        if (str[i] == str[len])
            len++;
        lps[i] = len;
    }
    return lps;
}

string shortestPalindrome(string s) {
    string rev_s = s;
    reverse(rev_s.begin(), rev_s.end());
    string combined = s + "#" + rev_s;

    vector<int> lps = computeLPS(combined);
    int longestPrefix = lps.back();

    string toAdd = rev_s.substr(0, s.size() - longestPrefix);
    return toAdd + s;
}

int main() {
    string s;
    cin >> s;
    cout << shortestPalindrome(s);
    return 0;
}
kmp palidrome




#include <iostream>
using namespace std;

int n;
int maze[20][20], sol[20][20];

bool isSafe(int x, int y) {
    return (x >= 0 && y >= 0 && x < n && y < n && maze[x][y] == 1 && sol[x][y] == 0);
}

bool solveMaze(int x, int y) {
    if (x == n - 1 && y == n - 1) { 
        sol[x][y] = 1;
        return true;
    }

    if (isSafe(x, y)) {
        sol[x][y] = 1;

        if (solveMaze(x + 1, y)) return true; // Down
        if (solveMaze(x, y + 1)) return true; // Right
        if (solveMaze(x - 1, y)) return true; // Up
        if (solveMaze(x, y - 1)) return true; // Left

        sol[x][y] = 0; // Backtrack
    }
    return false;
}

int main() {
    cin >> n;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> maze[i][j];

    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            sol[i][j] = 0;

    if (solveMaze(0, 0)) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                cout << sol[i][j] << " ";
            cout << "\n";
        }
    } else {
        cout << "No path found";
    }
}
Rat at maze
